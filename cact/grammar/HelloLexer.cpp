
    #include <vector>


// Generated from Hello.g4 by ANTLR 4.13.1


#include "HelloLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct HelloLexerStaticData final {
  HelloLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  HelloLexerStaticData(const HelloLexerStaticData&) = delete;
  HelloLexerStaticData(HelloLexerStaticData&&) = delete;
  HelloLexerStaticData& operator=(const HelloLexerStaticData&) = delete;
  HelloLexerStaticData& operator=(HelloLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag hellolexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
HelloLexerStaticData *hellolexerLexerStaticData = nullptr;

void hellolexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (hellolexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(hellolexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<HelloLexerStaticData>(
    std::vector<std::string>{
      "CONST", "INT", "FLOAT", "CHAR", "VOID", "IF", "ELSE", "WHILE", "BREAK", 
      "CONTINUE", "RETURN", "Ident", "NewLine", "WhiteSpace", "LineComment", 
      "BlockComment", "IntConst", "DecimalConst", "OctalConst", "HexadecConst", 
      "FloatConst", "ExponentPart", "CharConst", "Character", "EscapeSequence", 
      "NonZeroDigit", "Digit", "OctalDigit", "HexadecimalPrefix", "HexadecimalDigit", 
      "SEMI", "COMMA", "LPAREN", "RPAREN", "LBRACK", "RBRACK", "LBRACE", 
      "RBRACE", "ASSIGN", "PLUS", "MINUS", "MUL", "DIV", "MOD", "EQ", "NE", 
      "LT", "GT", "LE", "GE", "AND", "OR", "NOT"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'const'", "'int'", "'float'", "'char'", "'void'", "'if'", "'else'", 
      "'while'", "'break'", "'continue'", "'return'", "", "", "", "", "", 
      "", "", "", "';'", "','", "'('", "')'", "'['", "']'", "'{'", "'}'", 
      "'='", "'+'", "'-'", "'*'", "'/'", "'%'", "'=='", "'!='", "'<'", "'>'", 
      "'<='", "'>='", "'&&'", "'||'", "'!'"
    },
    std::vector<std::string>{
      "", "CONST", "INT", "FLOAT", "CHAR", "VOID", "IF", "ELSE", "WHILE", 
      "BREAK", "CONTINUE", "RETURN", "Ident", "NewLine", "WhiteSpace", "LineComment", 
      "BlockComment", "IntConst", "FloatConst", "CharConst", "SEMI", "COMMA", 
      "LPAREN", "RPAREN", "LBRACK", "RBRACK", "LBRACE", "RBRACE", "ASSIGN", 
      "PLUS", "MINUS", "MUL", "DIV", "MOD", "EQ", "NE", "LT", "GT", "LE", 
      "GE", "AND", "OR", "NOT"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,42,402,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,
  	1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,
  	1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,
  	8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,
  	1,10,1,10,1,11,1,11,5,11,172,8,11,10,11,12,11,175,9,11,1,12,1,12,3,12,
  	179,8,12,1,12,3,12,182,8,12,1,12,1,12,1,13,4,13,187,8,13,11,13,12,13,
  	188,1,13,1,13,1,14,1,14,1,14,1,14,5,14,197,8,14,10,14,12,14,200,9,14,
  	1,14,1,14,1,15,1,15,1,15,1,15,5,15,208,8,15,10,15,12,15,211,9,15,1,15,
  	1,15,1,15,1,15,1,15,1,16,1,16,1,16,3,16,221,8,16,1,17,1,17,5,17,225,8,
  	17,10,17,12,17,228,9,17,1,17,3,17,231,8,17,1,18,1,18,4,18,235,8,18,11,
  	18,12,18,236,1,19,1,19,4,19,241,8,19,11,19,12,19,242,1,20,4,20,246,8,
  	20,11,20,12,20,247,1,20,1,20,5,20,252,8,20,10,20,12,20,255,9,20,1,20,
  	1,20,4,20,259,8,20,11,20,12,20,260,1,20,4,20,264,8,20,11,20,12,20,265,
  	1,20,1,20,3,20,270,8,20,1,20,4,20,273,8,20,11,20,12,20,274,1,20,5,20,
  	278,8,20,10,20,12,20,281,9,20,1,20,1,20,4,20,285,8,20,11,20,12,20,286,
  	1,20,1,20,3,20,291,8,20,1,20,4,20,294,8,20,11,20,12,20,295,3,20,298,8,
  	20,1,20,3,20,301,8,20,1,21,1,21,3,21,305,8,21,1,21,4,21,308,8,21,11,21,
  	12,21,309,1,22,1,22,1,22,1,22,1,23,1,23,3,23,318,8,23,1,24,1,24,1,24,
  	1,24,1,24,3,24,325,8,24,1,24,3,24,328,8,24,1,24,1,24,1,24,1,24,4,24,334,
  	8,24,11,24,12,24,335,3,24,338,8,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,
  	1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,
  	1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,
  	1,42,1,42,1,43,1,43,1,44,1,44,1,44,1,45,1,45,1,45,1,46,1,46,1,47,1,47,
  	1,48,1,48,1,48,1,49,1,49,1,49,1,50,1,50,1,50,1,51,1,51,1,51,1,52,1,52,
  	1,209,0,53,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,
  	25,13,27,14,29,15,31,16,33,17,35,0,37,0,39,0,41,18,43,0,45,19,47,0,49,
  	0,51,0,53,0,55,0,57,0,59,0,61,20,63,21,65,22,67,23,69,24,71,25,73,26,
  	75,27,77,28,79,29,81,30,83,31,85,32,87,33,89,34,91,35,93,36,95,37,97,
  	38,99,39,101,40,103,41,105,42,1,0,14,3,0,65,90,95,95,97,122,4,0,48,57,
  	65,90,95,95,97,122,2,0,9,9,32,32,2,0,10,10,13,13,1,0,48,55,1,0,48,57,
  	2,0,69,69,101,101,2,0,43,43,45,45,2,0,70,70,102,102,4,0,10,10,13,13,39,
  	39,92,92,8,0,34,34,39,39,92,92,98,98,102,102,110,110,114,114,116,116,
  	1,0,49,57,2,0,88,88,120,120,3,0,48,57,65,70,97,102,424,0,1,1,0,0,0,0,
  	3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,
  	0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,
  	25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,41,1,
  	0,0,0,0,45,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,
  	0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,
  	79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,
  	0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,
  	0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,1,107,1,0,0,0,3,113,1,0,0,
  	0,5,117,1,0,0,0,7,123,1,0,0,0,9,128,1,0,0,0,11,133,1,0,0,0,13,136,1,0,
  	0,0,15,141,1,0,0,0,17,147,1,0,0,0,19,153,1,0,0,0,21,162,1,0,0,0,23,169,
  	1,0,0,0,25,181,1,0,0,0,27,186,1,0,0,0,29,192,1,0,0,0,31,203,1,0,0,0,33,
  	220,1,0,0,0,35,230,1,0,0,0,37,232,1,0,0,0,39,238,1,0,0,0,41,297,1,0,0,
  	0,43,302,1,0,0,0,45,311,1,0,0,0,47,317,1,0,0,0,49,337,1,0,0,0,51,339,
  	1,0,0,0,53,341,1,0,0,0,55,343,1,0,0,0,57,345,1,0,0,0,59,348,1,0,0,0,61,
  	350,1,0,0,0,63,352,1,0,0,0,65,354,1,0,0,0,67,356,1,0,0,0,69,358,1,0,0,
  	0,71,360,1,0,0,0,73,362,1,0,0,0,75,364,1,0,0,0,77,366,1,0,0,0,79,368,
  	1,0,0,0,81,370,1,0,0,0,83,372,1,0,0,0,85,374,1,0,0,0,87,376,1,0,0,0,89,
  	378,1,0,0,0,91,381,1,0,0,0,93,384,1,0,0,0,95,386,1,0,0,0,97,388,1,0,0,
  	0,99,391,1,0,0,0,101,394,1,0,0,0,103,397,1,0,0,0,105,400,1,0,0,0,107,
  	108,5,99,0,0,108,109,5,111,0,0,109,110,5,110,0,0,110,111,5,115,0,0,111,
  	112,5,116,0,0,112,2,1,0,0,0,113,114,5,105,0,0,114,115,5,110,0,0,115,116,
  	5,116,0,0,116,4,1,0,0,0,117,118,5,102,0,0,118,119,5,108,0,0,119,120,5,
  	111,0,0,120,121,5,97,0,0,121,122,5,116,0,0,122,6,1,0,0,0,123,124,5,99,
  	0,0,124,125,5,104,0,0,125,126,5,97,0,0,126,127,5,114,0,0,127,8,1,0,0,
  	0,128,129,5,118,0,0,129,130,5,111,0,0,130,131,5,105,0,0,131,132,5,100,
  	0,0,132,10,1,0,0,0,133,134,5,105,0,0,134,135,5,102,0,0,135,12,1,0,0,0,
  	136,137,5,101,0,0,137,138,5,108,0,0,138,139,5,115,0,0,139,140,5,101,0,
  	0,140,14,1,0,0,0,141,142,5,119,0,0,142,143,5,104,0,0,143,144,5,105,0,
  	0,144,145,5,108,0,0,145,146,5,101,0,0,146,16,1,0,0,0,147,148,5,98,0,0,
  	148,149,5,114,0,0,149,150,5,101,0,0,150,151,5,97,0,0,151,152,5,107,0,
  	0,152,18,1,0,0,0,153,154,5,99,0,0,154,155,5,111,0,0,155,156,5,110,0,0,
  	156,157,5,116,0,0,157,158,5,105,0,0,158,159,5,110,0,0,159,160,5,117,0,
  	0,160,161,5,101,0,0,161,20,1,0,0,0,162,163,5,114,0,0,163,164,5,101,0,
  	0,164,165,5,116,0,0,165,166,5,117,0,0,166,167,5,114,0,0,167,168,5,110,
  	0,0,168,22,1,0,0,0,169,173,7,0,0,0,170,172,7,1,0,0,171,170,1,0,0,0,172,
  	175,1,0,0,0,173,171,1,0,0,0,173,174,1,0,0,0,174,24,1,0,0,0,175,173,1,
  	0,0,0,176,178,5,13,0,0,177,179,5,10,0,0,178,177,1,0,0,0,178,179,1,0,0,
  	0,179,182,1,0,0,0,180,182,5,10,0,0,181,176,1,0,0,0,181,180,1,0,0,0,182,
  	183,1,0,0,0,183,184,6,12,0,0,184,26,1,0,0,0,185,187,7,2,0,0,186,185,1,
  	0,0,0,187,188,1,0,0,0,188,186,1,0,0,0,188,189,1,0,0,0,189,190,1,0,0,0,
  	190,191,6,13,0,0,191,28,1,0,0,0,192,193,5,47,0,0,193,194,5,47,0,0,194,
  	198,1,0,0,0,195,197,8,3,0,0,196,195,1,0,0,0,197,200,1,0,0,0,198,196,1,
  	0,0,0,198,199,1,0,0,0,199,201,1,0,0,0,200,198,1,0,0,0,201,202,6,14,0,
  	0,202,30,1,0,0,0,203,204,5,47,0,0,204,205,5,42,0,0,205,209,1,0,0,0,206,
  	208,9,0,0,0,207,206,1,0,0,0,208,211,1,0,0,0,209,210,1,0,0,0,209,207,1,
  	0,0,0,210,212,1,0,0,0,211,209,1,0,0,0,212,213,5,42,0,0,213,214,5,47,0,
  	0,214,215,1,0,0,0,215,216,6,15,0,0,216,32,1,0,0,0,217,221,3,35,17,0,218,
  	221,3,37,18,0,219,221,3,39,19,0,220,217,1,0,0,0,220,218,1,0,0,0,220,219,
  	1,0,0,0,221,34,1,0,0,0,222,226,3,51,25,0,223,225,3,53,26,0,224,223,1,
  	0,0,0,225,228,1,0,0,0,226,224,1,0,0,0,226,227,1,0,0,0,227,231,1,0,0,0,
  	228,226,1,0,0,0,229,231,5,48,0,0,230,222,1,0,0,0,230,229,1,0,0,0,231,
  	36,1,0,0,0,232,234,5,48,0,0,233,235,7,4,0,0,234,233,1,0,0,0,235,236,1,
  	0,0,0,236,234,1,0,0,0,236,237,1,0,0,0,237,38,1,0,0,0,238,240,3,57,28,
  	0,239,241,3,59,29,0,240,239,1,0,0,0,241,242,1,0,0,0,242,240,1,0,0,0,242,
  	243,1,0,0,0,243,40,1,0,0,0,244,246,7,5,0,0,245,244,1,0,0,0,246,247,1,
  	0,0,0,247,245,1,0,0,0,247,248,1,0,0,0,248,249,1,0,0,0,249,253,5,46,0,
  	0,250,252,7,5,0,0,251,250,1,0,0,0,252,255,1,0,0,0,253,251,1,0,0,0,253,
  	254,1,0,0,0,254,298,1,0,0,0,255,253,1,0,0,0,256,258,5,46,0,0,257,259,
  	7,5,0,0,258,257,1,0,0,0,259,260,1,0,0,0,260,258,1,0,0,0,260,261,1,0,0,
  	0,261,298,1,0,0,0,262,264,7,5,0,0,263,262,1,0,0,0,264,265,1,0,0,0,265,
  	263,1,0,0,0,265,266,1,0,0,0,266,267,1,0,0,0,267,269,7,6,0,0,268,270,7,
  	7,0,0,269,268,1,0,0,0,269,270,1,0,0,0,270,272,1,0,0,0,271,273,7,5,0,0,
  	272,271,1,0,0,0,273,274,1,0,0,0,274,272,1,0,0,0,274,275,1,0,0,0,275,298,
  	1,0,0,0,276,278,7,5,0,0,277,276,1,0,0,0,278,281,1,0,0,0,279,277,1,0,0,
  	0,279,280,1,0,0,0,280,282,1,0,0,0,281,279,1,0,0,0,282,284,5,46,0,0,283,
  	285,7,5,0,0,284,283,1,0,0,0,285,286,1,0,0,0,286,284,1,0,0,0,286,287,1,
  	0,0,0,287,288,1,0,0,0,288,290,7,6,0,0,289,291,7,7,0,0,290,289,1,0,0,0,
  	290,291,1,0,0,0,291,293,1,0,0,0,292,294,7,5,0,0,293,292,1,0,0,0,294,295,
  	1,0,0,0,295,293,1,0,0,0,295,296,1,0,0,0,296,298,1,0,0,0,297,245,1,0,0,
  	0,297,256,1,0,0,0,297,263,1,0,0,0,297,279,1,0,0,0,298,300,1,0,0,0,299,
  	301,7,8,0,0,300,299,1,0,0,0,300,301,1,0,0,0,301,42,1,0,0,0,302,304,7,
  	6,0,0,303,305,7,7,0,0,304,303,1,0,0,0,304,305,1,0,0,0,305,307,1,0,0,0,
  	306,308,3,53,26,0,307,306,1,0,0,0,308,309,1,0,0,0,309,307,1,0,0,0,309,
  	310,1,0,0,0,310,44,1,0,0,0,311,312,5,39,0,0,312,313,3,47,23,0,313,314,
  	5,39,0,0,314,46,1,0,0,0,315,318,8,9,0,0,316,318,3,49,24,0,317,315,1,0,
  	0,0,317,316,1,0,0,0,318,48,1,0,0,0,319,320,5,92,0,0,320,338,7,10,0,0,
  	321,322,5,92,0,0,322,324,7,4,0,0,323,325,7,4,0,0,324,323,1,0,0,0,324,
  	325,1,0,0,0,325,327,1,0,0,0,326,328,7,4,0,0,327,326,1,0,0,0,327,328,1,
  	0,0,0,328,338,1,0,0,0,329,330,5,92,0,0,330,331,5,120,0,0,331,333,1,0,
  	0,0,332,334,3,59,29,0,333,332,1,0,0,0,334,335,1,0,0,0,335,333,1,0,0,0,
  	335,336,1,0,0,0,336,338,1,0,0,0,337,319,1,0,0,0,337,321,1,0,0,0,337,329,
  	1,0,0,0,338,50,1,0,0,0,339,340,7,11,0,0,340,52,1,0,0,0,341,342,7,5,0,
  	0,342,54,1,0,0,0,343,344,7,4,0,0,344,56,1,0,0,0,345,346,5,48,0,0,346,
  	347,7,12,0,0,347,58,1,0,0,0,348,349,7,13,0,0,349,60,1,0,0,0,350,351,5,
  	59,0,0,351,62,1,0,0,0,352,353,5,44,0,0,353,64,1,0,0,0,354,355,5,40,0,
  	0,355,66,1,0,0,0,356,357,5,41,0,0,357,68,1,0,0,0,358,359,5,91,0,0,359,
  	70,1,0,0,0,360,361,5,93,0,0,361,72,1,0,0,0,362,363,5,123,0,0,363,74,1,
  	0,0,0,364,365,5,125,0,0,365,76,1,0,0,0,366,367,5,61,0,0,367,78,1,0,0,
  	0,368,369,5,43,0,0,369,80,1,0,0,0,370,371,5,45,0,0,371,82,1,0,0,0,372,
  	373,5,42,0,0,373,84,1,0,0,0,374,375,5,47,0,0,375,86,1,0,0,0,376,377,5,
  	37,0,0,377,88,1,0,0,0,378,379,5,61,0,0,379,380,5,61,0,0,380,90,1,0,0,
  	0,381,382,5,33,0,0,382,383,5,61,0,0,383,92,1,0,0,0,384,385,5,60,0,0,385,
  	94,1,0,0,0,386,387,5,62,0,0,387,96,1,0,0,0,388,389,5,60,0,0,389,390,5,
  	61,0,0,390,98,1,0,0,0,391,392,5,62,0,0,392,393,5,61,0,0,393,100,1,0,0,
  	0,394,395,5,38,0,0,395,396,5,38,0,0,396,102,1,0,0,0,397,398,5,124,0,0,
  	398,399,5,124,0,0,399,104,1,0,0,0,400,401,5,33,0,0,401,106,1,0,0,0,31,
  	0,173,178,181,188,198,209,220,226,230,236,242,247,253,260,265,269,274,
  	279,286,290,295,297,300,304,309,317,324,327,335,337,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  hellolexerLexerStaticData = staticData.release();
}

}

HelloLexer::HelloLexer(CharStream *input) : Lexer(input) {
  HelloLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *hellolexerLexerStaticData->atn, hellolexerLexerStaticData->decisionToDFA, hellolexerLexerStaticData->sharedContextCache);
}

HelloLexer::~HelloLexer() {
  delete _interpreter;
}

std::string HelloLexer::getGrammarFileName() const {
  return "Hello.g4";
}

const std::vector<std::string>& HelloLexer::getRuleNames() const {
  return hellolexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& HelloLexer::getChannelNames() const {
  return hellolexerLexerStaticData->channelNames;
}

const std::vector<std::string>& HelloLexer::getModeNames() const {
  return hellolexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& HelloLexer::getVocabulary() const {
  return hellolexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView HelloLexer::getSerializedATN() const {
  return hellolexerLexerStaticData->serializedATN;
}

const atn::ATN& HelloLexer::getATN() const {
  return *hellolexerLexerStaticData->atn;
}




void HelloLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  hellolexerLexerInitialize();
#else
  ::antlr4::internal::call_once(hellolexerLexerOnceFlag, hellolexerLexerInitialize);
#endif
}
